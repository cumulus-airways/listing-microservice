!function(e){function t(e){var t=require("./"+e+"."+o+".hot-update.js");!function(e,t){if(!b[e]||!m[e])return;for(var r in m[e]=!1,t)Object.prototype.hasOwnProperty.call(t,r)&&(f[r]=t[r]);0==--y&&0===g&&O()}(t.id,t.modules)}var r,n=!0,o="8f1cb287ccdded36e630",i={},s=[],c=[];function d(e){var t=_[e];if(!t)return S;var n=function(n){return t.hot.active?(_[n]?-1===_[n].parents.indexOf(e)&&_[n].parents.push(e):(s=[e],r=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),s=[]),S(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return S[e]},set:function(t){S[e]=t}}};for(var i in S)Object.prototype.hasOwnProperty.call(S,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(n,i,o(i));return n.e=function(e){return"ready"===l&&p("prepare"),g++,S.e(e).then(t,function(e){throw t(),e});function t(){g--,"prepare"===l&&(v[e]||w(e),0===g&&0===y&&O())}},n.t=function(e,t){return 1&t&&(e=n(e)),S.t(e,-2&t)},n}var a=[],l="idle";function p(e){l=e;for(var t=0;t<a.length;t++)a[t].call(null,e)}var u,f,h,y=0,g=0,v={},m={},b={};function D(e){return+e+""===e?+e:e}function j(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return n=e,p("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return p("idle"),null;m={},v={},b=e.c,h=e.h,p("prepare");var t=new Promise(function(e,t){u={resolve:e,reject:t}});f={};return w(0),"prepare"===l&&0===g&&0===y&&O(),t})}function w(e){b[e]?(m[e]=!0,y++,t(e)):v[e]=!0}function O(){p("ready");var e=u;if(u=null,e)if(n)Promise.resolve().then(function(){return x(n)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var r in f)Object.prototype.hasOwnProperty.call(f,r)&&t.push(D(r));e.resolve(t)}}function x(t){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var r,n,c,d,a;function u(e){for(var t=[e],r={},n=t.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),i=o.id,s=o.chain;if((d=_[i])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var c=0;c<d.parents.length;c++){var a=d.parents[c],l=_[a];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([a]),moduleId:i,parentId:a};-1===t.indexOf(a)&&(l.hot._acceptedDependencies[i]?(r[a]||(r[a]=[]),y(r[a],[i])):(delete r[a],t.push(a),n.push({chain:s.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function y(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}t=t||{};var g={},v=[],m={},j=function(){console.warn("[HMR] unexpected require("+O.moduleId+") to disposed module")};for(var w in f)if(Object.prototype.hasOwnProperty.call(f,w)){var O;a=D(w);var x=!1,P=!1,I=!1,E="";switch((O=f[w]?u(a):{type:"disposed",moduleId:w}).chain&&(E="\nUpdate propagation: "+O.chain.join(" -> ")),O.type){case"self-declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(x=new Error("Aborted because of self decline: "+O.moduleId+E));break;case"declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(x=new Error("Aborted because of declined dependency: "+O.moduleId+" in "+O.parentId+E));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(O),t.ignoreUnaccepted||(x=new Error("Aborted because "+a+" is not accepted"+E));break;case"accepted":t.onAccepted&&t.onAccepted(O),P=!0;break;case"disposed":t.onDisposed&&t.onDisposed(O),I=!0;break;default:throw new Error("Unexception type "+O.type)}if(x)return p("abort"),Promise.reject(x);if(P)for(a in m[a]=f[a],y(v,O.outdatedModules),O.outdatedDependencies)Object.prototype.hasOwnProperty.call(O.outdatedDependencies,a)&&(g[a]||(g[a]=[]),y(g[a],O.outdatedDependencies[a]));I&&(y(v,[O.moduleId]),m[a]=j)}var A,C=[];for(n=0;n<v.length;n++)a=v[n],_[a]&&_[a].hot._selfAccepted&&C.push({module:a,errorHandler:_[a].hot._selfAccepted});p("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var H,F,k=v.slice();k.length>0;)if(a=k.pop(),d=_[a]){var T={},M=d.hot._disposeHandlers;for(c=0;c<M.length;c++)(r=M[c])(T);for(i[a]=T,d.hot.active=!1,delete _[a],delete g[a],c=0;c<d.children.length;c++){var q=_[d.children[c]];q&&((A=q.parents.indexOf(a))>=0&&q.parents.splice(A,1))}}for(a in g)if(Object.prototype.hasOwnProperty.call(g,a)&&(d=_[a]))for(F=g[a],c=0;c<F.length;c++)H=F[c],(A=d.children.indexOf(H))>=0&&d.children.splice(A,1);for(a in p("apply"),o=h,m)Object.prototype.hasOwnProperty.call(m,a)&&(e[a]=m[a]);var U=null;for(a in g)if(Object.prototype.hasOwnProperty.call(g,a)&&(d=_[a])){F=g[a];var N=[];for(n=0;n<F.length;n++)if(H=F[n],r=d.hot._acceptedDependencies[H]){if(-1!==N.indexOf(r))continue;N.push(r)}for(n=0;n<N.length;n++){r=N[n];try{r(F)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:a,dependencyId:F[n],error:e}),t.ignoreErrored||U||(U=e)}}}for(n=0;n<C.length;n++){var R=C[n];a=R.module,s=[a];try{S(a)}catch(e){if("function"==typeof R.errorHandler)try{R.errorHandler(e)}catch(r){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:a,error:r,originalError:e}),t.ignoreErrored||U||(U=r),U||(U=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:a,error:e}),t.ignoreErrored||U||(U=e)}}return U?(p("fail"),Promise.reject(U)):(p("idle"),new Promise(function(e){e(v)}))}var _={};function S(t){if(_[t])return _[t].exports;var n=_[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,r){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._acceptedDependencies[e[n]]=r||function(){};else t._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._declinedDependencies[e[r]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=t._disposeHandlers.indexOf(e);r>=0&&t._disposeHandlers.splice(r,1)},check:j,apply:x,status:function(e){if(!e)return l;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:i[e]};return r=void 0,t}(t),parents:(c=s,s=[],c),children:[]};return e[t].call(n.exports,n,n.exports,d(t)),n.l=!0,n.exports}S.m=e,S.c=_,S.d=function(e,t,r){S.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},S.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},S.t=function(e,t){if(1&t&&(e=S(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(S.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)S.d(r,n,function(t){return e[t]}.bind(null,n));return r},S.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return S.d(t,"a",t),t},S.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},S.p="/Users/saifurrehman/Desktop/ICP-Airways/icp-backend/listing-mongo-microservice/dist",S.h=function(){return o},d(6)(S.s=6)}([function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("debug")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("express-session")},function(e,t,r){r(7),e.exports=r(9)},function(e,t){e.exports=require("@babel/polyfill")},function(e,t){e.exports=require("reflect-metadata")},function(e,t,r){"use strict";r.r(t);var n=r(4),o=r.n(n),i=r(2),s=r.n(i),c=r(1),d=r.n(c),a=r(3),l=r.n(a),p=r(5),u=r.n(p),f=r(0),h=new(0,f.Schema)({Year:{type:String},Month:{type:String},DepTime:{type:String},DayofMonth:{type:String},DepDelay:{type:String},CRSDepTime:{type:String},ArrTime:{type:String},CRSArrTime:{type:String},FlightNum:{type:String},TailNum:{type:String},ActualElapsedTime:{type:String},CRSElapsedTime:{type:String},Airtime:{type:String},ArrDelay:{type:String},Origin:{type:String},Dest:{type:String},Distance:{type:String}}),y=f.model("Flight",h),g=function(){function e(){}return e.prototype.addNewFlight=function(e,t){t.setHeader("Content-Type","application/json"),new y(e.body).save(function(e,r){e?t.status(404).json({err:e}):t.json(r)})},e.prototype.getFlights=function(e,t){t.setHeader("Content-Type","application/json"),y.find({},function(e,r){e?t.status(404).json({err:e}):t.status(200).send(r)})},e.prototype.searchFlights=function(e,t){t.setHeader("Content-Type","application/json");var r={$and:[{Year:e.body.Year,Month:e.body.Month,DayofMonth:e.body.DayOfMonth,Origin:e.body.origin,Dest:e.body.dest}]};y.find(r,function(e,r){e?t.status(404).json({err:e}):t.status(200).send(r)})},e.prototype.getFlightById=function(e,t){t.setHeader("Content-Type","application/json"),y.findById(e.params.ID,function(e,r){e?t.status(404).json({err:e}):t.status(200).send(r)})},e.prototype.updateFlight=function(e,t){t.setHeader("Content-Type","application/json"),y.findOneAndUpdate({_id:e.params.ID},e.body,{new:!0},function(e,r){e?t.status(404).json({err:e}):t.json(r)})},e.prototype.deleteFlight=function(e,t){t.setHeader("Content-Type","application/json"),y.deleteOne({_id:e.params.ID},function(e){e?t.status(404).json({err:e}):t.json({message:"success"})})},e}(),v=(r(8),(new(function(){function e(){this.flightController=new g,this.router=Object(c.Router)(),this.routes()}return e.prototype.routes=function(){this.router.get("/healthz",function(e,t){t.status(200).send("ok")}),this.router.get("/listFlights",function(e,t,r){r()},this.flightController.getFlights),this.router.post("/listFlights",function(e,t,r){r()},this.flightController.addNewFlight),this.router.post("/searchFlights",function(e,t,r){r()},this.flightController.searchFlights),this.router.get("/listFlights/:ID",function(e,t,r){r()},this.flightController.getFlightById),this.router.put("/listFlights/:ID",function(e,t,r){r()},this.flightController.updateFlight),this.router.delete("/listFlights/:ID",function(e,t,r){r()},this.flightController.deleteFlight)},e}())).router),m=r(0);m.Promise=Promise;var b=(new(function(){function e(){this.mongoUrl="mongodb://168.1.148.8:32165/items",this.express=d()(),this.middleware(),this.routes(),this.mongoSetup()}return e.prototype.mongoSetup=function(){m.Promise=global.Promise,m.connect(this.mongoUrl)},e.prototype.middleware=function(){this.express.use(function(e,t,r){t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Headers","*"),r()}),this.express.use(l.a.json()),this.express.use(l.a.urlencoded({extended:!1})),this.express.use(u()({secret:"test123",saveUninitialized:!1,resave:!0}))},e.prototype.routes=function(){this.express.get("/",function(e,t){t.send("hi")}),this.express.use("/",v)},e}())).express;s()("ts-express:server"),new(function(){return function(){var e=this;this.normalizePort=function(e){var t="string"==typeof e?parseInt(e,10):e;return isNaN(t)?e:t>=0&&t},this.onError=function(t){if("listen"!==t.syscall)throw t;var r="string"==typeof e.port?"Pipe "+e.port:"Port "+e.port;switch(t.code){case"EACCES":console.error(r+" requires elevated privileges"),process.exit(1);break;case"EADDRINUSE":console.error(r+" is already in use"),process.exit(1);break;default:throw t}},this.onListening=function(){console.log("listening on "+e.port);var t=e.server.address(),r="string"==typeof t?"pipe "+t:"port "+t.port;s()("Listening on "+r)},this.port=this.normalizePort(7e3),b.set("port",this.port),this.server=o.a.createServer(b),this.server.listen(this.port),this.server.on("error",this.onError),this.server.on("listening",this.onListening)}}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,